<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<configuration status="WARN" monitorInterval="30">
	<properties>
		<property name="LOG_HOME">logs/urms</property>
		<property name="LOG_ALL">all</property>
		<property name="LOG_INFO">info</property>
		<property name="LOG_WARN">warn</property>
		<property name="LOG_ERROR">error</property>

		<property name="FILE_SIZE">100 MB</property>
		<property name="FILE_MAX_NUM">1000</property>
	</properties>
	<!--先定义所有的appender-->
	<appenders>
		<!--这个输出控制台的配置-->
		<console name="Console" target="SYSTEM_OUT">
			<!--输出日志的格式-->
			<PatternLayout pattern="[%date{yyyy-MM-dd HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
		</console>
		<!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用-->
		<File name="log" fileName="${LOG_HOME}/TEMP.log" append="false">
			<PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n"/>
		</File>
		<!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
		<RollingFile name="RollingFileInfo" fileName="${LOG_HOME}/${LOG_INFO}.log"
					 filePattern="${LOG_HOME}/$${date:yyyy-MM}/${LOG_INFO}-%d{yyyy-MM-dd}-%i.log">
			<!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
			<ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
			<PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
			<Policies>
				<TimeBasedTriggeringPolicy interval="1" modulate="true"/>
				<SizeBasedTriggeringPolicy size="${FILE_SIZE}"/>
			</Policies>
			<DefaultRolloverStrategy max="${FILE_MAX_NUM}"/>
		</RollingFile>
		<RollingFile name="RollingFileWarn" fileName="${LOG_HOME}/${LOG_WARN}.log"
					 filePattern="${LOG_HOME}/$${date:yyyy-MM}/${LOG_WARN}-%d{yyyy-MM-dd}-%i.log">
			<ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
			<PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
			<Policies>
				<TimeBasedTriggeringPolicy interval="1" modulate="true"/>
				<SizeBasedTriggeringPolicy size="${FILE_SIZE}"/>
			</Policies>
			<DefaultRolloverStrategy max="${FILE_MAX_NUM}"/>
		</RollingFile>
		<RollingFile name="RollingFileError" fileName="${LOG_HOME}/${LOG_ERROR}.log"
					 filePattern="${LOG_HOME}/$${date:yyyy-MM}/${LOG_ERROR}-%d{yyyy-MM-dd}-%i.log">
			<ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
			<PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
			<Policies>
				<TimeBasedTriggeringPolicy interval="1" modulate="true"/>
				<SizeBasedTriggeringPolicy size="${FILE_SIZE}"/>
			</Policies>
			<DefaultRolloverStrategy max="${FILE_MAX_NUM}"/>
		</RollingFile>
		<!-- 所有日志 -->
		<RollingFile name="RollingFileAll" fileName="${LOG_HOME}/${LOG_ALL}.log"
					 filePattern="${LOG_HOME}/$${date:yyyy-MM}/${LOG_ALL}-%d{yyyy-MM-dd}-%i.log">
			<ThresholdFilter level="all" onMatch="ACCEPT" onMismatch="DENY"/>
			<PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
			<Policies>
				<TimeBasedTriggeringPolicy interval="1" modulate="true"/>
				<SizeBasedTriggeringPolicy size="${FILE_SIZE}"/>
			</Policies>
			<DefaultRolloverStrategy max="${FILE_MAX_NUM}"/>
		</RollingFile>
	</appenders>
	<!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
	<loggers>
		<!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
		<logger name="org.springframework" level="INFO"/>
		<logger name="org.mybatis" level="INFO"/>
		<logger name="com.alibaba.druid" level="INFO"/>
		<logger name="org.hibernate.validator" level="INFO"/>
		<logger name="org.thymeleaf" level="INFO"/>
		<root level="all">
			<appender-ref ref="Console"/>
			<appender-ref ref="RollingFileInfo"/>
			<appender-ref ref="RollingFileWarn"/>
			<appender-ref ref="RollingFileError"/>
			<appender-ref ref="RollingFileAll"/>
		</root>
	</loggers>
</configuration>